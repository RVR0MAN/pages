import {baseUrl} from './config.js';

// =============================================
// –ë–õ–û–ö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
// =============================================

let tg, user;

try {
    tg = Telegram.WebApp;
    tg.expand();
    tg.enableClosingConfirmation();
    tg.setHeaderColor('#2a2a2a');
    tg.setBackgroundColor('#2a2a2a');
    user = tg.initDataUnsafe.user;
} catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:", error);
    tg = { initDataUnsafe: {} };
    user = { id: 0 };
}

/**
 * –ö–æ–ª–ª–µ–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {Object.<string, HTMLElement>}
 */
const screens = {
    main: document.getElementById('mainScreen'),
    profile: document.getElementById('profileScreen'),
    application: document.getElementById('applicationScreen')
};

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const state = {
    applicationSent: false,
    applicationData: null
};

// =============================================
// –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –≠–ö–†–ê–ù–ê–ú–ò
// =============================================

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–æ–≤
 */
function showScreen(screenId) {
    Object.values(screens).forEach(screen => {
        if (screen) screen.classList.add('hidden');
    });

    const target = screens[screenId];
    if (target) {
        target.classList.remove('hidden');
    }
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–∞–¥–µ—Ä–∞
function showLoader(text = '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...') {
    const el = document.getElementById('globalLoading');
    if (!el) return;
    const p = el.querySelector('p');
    if (p) p.textContent = text;
    el.classList.remove('hidden');
}

function hideLoader() {
    const el = document.getElementById('globalLoading');
    if (!el) return;
    el.classList.add('hidden');
}

// =============================================
// –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–†–û–§–ò–õ–ï–ú –ò –ó–ê–Ø–í–ö–ê–ú–ò
// =============================================

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function updateUserInfo() {
    const container = document.getElementById('userInfo');
    if (!container) return;

    if (state.applicationSent && state.applicationData) {
        container.innerHTML = `
            <p><strong>–†–æ–ª—å:</strong> –ì–æ—Å—Ç—å</p>
            <p><strong>ID:</strong> ${user.id || '-'}</p>
            <p><strong>–§–∞–º–∏–ª–∏—è:</strong> ${state.applicationData.lastName || '-'}</p>
            <p><strong>–ò–º—è:</strong> ${state.applicationData.firstName || '-'}</p>
            <p><strong>–û—Ç—á–µ—Å—Ç–≤–æ:</strong> ${state.applicationData.middleName || '-'}</p>
            <p><strong>–ì—Ä—É–ø–ø–∞:</strong> ${state.applicationData.group || '-'}</p>
            <p><em>üïó –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</em></p>
        `;
    } else {
        container.innerHTML = `
            <p><strong>–†–æ–ª—å:</strong> –ì–æ—Å—Ç—å</p>
            <p><strong>ID:</strong> ${user.id || '-'}</p>
            <p><strong>–§–∞–º–∏–ª–∏—è:</strong> -</p>
            <p><strong>–ò–º—è:</strong> -</p>
            <p><strong>–û—Ç—á–µ—Å—Ç–≤–æ:</strong> -</p>
            <p><strong>–ì—Ä—É–ø–ø–∞:</strong> -</p>
            <p><em>‚ÑπÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É</em></p>
        `;
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
 */
async function loadApplicationData() {
    try {
        showLoader('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏...');

        const response = await fetch(`${baseUrl}/app/user/guest/get_application`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({userId: user.id})
        });

        if (response.ok) {
            const applicationData = await response.json();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
            if (applicationData.lastName) {
                state.applicationSent = true;
                state.applicationData = applicationData;
            } else {
                state.applicationSent = false;
                state.applicationData = null;
            }
        } else if (response.status === 404) {
            state.applicationSent = false;
            state.applicationData = null;
        } else {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        common.showErrorAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message);
        state.applicationSent = false;
        state.applicationData = null;
    } finally {
        hideLoader();
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
async function submitApplication(e) {
    if (e) e.preventDefault();

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const applicationData = {
        userId: user.id,
        lastName: document.getElementById('lastName').value,
        firstName: document.getElementById('firstName').value,
        middleName: document.getElementById('middleName').value,
        group: document.getElementById('group').value
    };

    try {
        showLoader('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...');

        const response = await fetch(`${baseUrl}/app/user/guest/create_application`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(applicationData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
        }

        const result = await response.text();
        state.applicationSent = true;
        state.applicationData = applicationData;
        updateUserInfo();
        showScreen('profile');
        common.showAlert(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        common.showErrorAlert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: ' + error.message);
    } finally {
        hideLoader();
    }
}

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
 */
function fillApplicationForm() {
    if (state.applicationData) {
        document.getElementById('lastName').value = state.applicationData.lastName || '';
        document.getElementById('firstName').value = state.applicationData.firstName || '';
        document.getElementById('middleName').value = state.applicationData.middleName || '';
        document.getElementById('group').value = state.applicationData.group || '';
    }
}

// =============================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// =============================================

function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.getElementById('profileBtn')?.addEventListener('click', async () => {
        await loadApplicationData();
        updateUserInfo();
        showScreen('profile');
    });

    document.getElementById('visitsBtn')?.addEventListener('click', () => {
        if (state.applicationSent) {
            common.showAlert('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        } else {
            common.showErrorAlert('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ.');
        }
    });

    document.getElementById('applicationBtn')?.addEventListener('click', () => {
        fillApplicationForm();
        showScreen('application');
    });

    document.getElementById('backFromProfileBtn')?.addEventListener('click', () => showScreen('main'));
    document.getElementById('cancelApplicationBtn')?.addEventListener('click', () => showScreen('profile'));

    // –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏
    document.getElementById('applicationForm')?.addEventListener('submit', submitApplication);
}

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =============================================

function initApp() {
    updateUserInfo();
    setupEventListeners();
    showScreen('main');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', initApp);